#!/usr/bin/env python3

# Copyright (C) 2020 Andreas FÃ¼glistaler <andreas.fueglistaler@epfl.ch>
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import argparse
import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from pdb_tools import PDB
from pdb_tools import FASTA

BB   = ["N", "CA", "C", "O"]

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Thread target"
                                     "sequence on template structure.")
    parser.add_argument("pdb", type=argparse.FileType('r'), nargs='?',
                        default=sys.stdin, help="pdb-file")
    parser.add_argument("--fasta", "-f", required=True,
                        help="Alignement fasta-file")

    args  = parser.parse_args()
    pdb   = PDB(args.pdb)
    fasta = FASTA(args.fasta)

    ress = pdb.residues()
    res = next(ress)

    for al in fasta.alignement():
        aa_tar = al[0] # Target amino acid
        aa_tem = al[1] # Template amino acid
        if aa_tar == '-' == aa_tem:
            continue
        if aa_tar == '-': # Skip that residue
            res = next(ress)
            continue
        if aa_tem == '-': # Create residue on the fly
            pass
        if aa_tar == aa_tem: #Same residue, just copy

            res.write()


